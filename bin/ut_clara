#!/usr/bin/env python
import os
import argparse
from ast import literal_eval

from clara.clara import Clara
from clara.common import print_trace, list_all_files


def evaluate_sources(lang, base_dir, inputs):
    sources = list_all_files(base_dir)
    evaluated_sources_count = 0
    clara = Clara(inputs, lang=lang)
    for source in sources:
        clara.process_sources([source])
        try:
            trace = clara.eval()
            evaluated_sources_count += 1
        except Exception as e:
            print(source, "failed!", e)
    print(len(sources), evaluated_sources_count)


def evaluate_source(lang, source, inputs):
    clara = Clara(inputs, lang=lang)
    clara.process_sources([source])
    trace = clara.eval()
    print(clara.models[0])
    print_trace(trace)


def do_clustering(lang, base_dir, inputs):
    sources = list(filter(lambda p: p.rsplit('.', 1)[1] == lang, list_all_files(base_dir)))
    print("Num of sources:", len(sources))
    clara = Clara(inputs, lang=lang)
    clara.process_sources(sources)
    clara.cluster()


def do_repair(lang, source_a, source_b, inputs):
    clara = Clara(inputs, lang=lang)
    clara.process_sources([source_a, source_b])
    clara.repair()


def generate_feedback(lang, correct_sources_dir, wrong_source, inputs):
    clara = Clara(inputs, lang=lang)
    sources = list_all_files(correct_sources_dir)
    clara.process_sources(sources)
    cluster_files = clara.cluster()
    print("*********** Clustering Done! ***********")
    clara.process_sources([*cluster_files, wrong_source])
    print("Generated Repair for", wrong_source, ":")
    clara.feedback()


def match(lang, source_a, source_b, inputs):
    clara = Clara(inputs, lang=lang)
    clara.process_sources([source_a, source_b])
    if clara.match():
        print(source_a, "and", source_b, "Matched!!!")
    else:
        print(source_a, "and", source_b, "Do not match!!!")


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("operation", help="operation to run", choices=["repair", "cluster", "match", "eval"])
    parser.add_argument("--lang", default="cpp", help="programs language, default is cpp")
    parser.add_argument("--src", help="source file")
    parser.add_argument("--match-src", help="other source file for match")
    parser.add_argument("--src-dir", help="sources directory")
    parser.add_argument("--inputs", required=True, help="inputs")
    args = parser.parse_args()
    args.inputs = literal_eval(args.inputs)
    return args


if __name__ == '__main__':
    args = parse_arguments()
    if args.operation == 'eval':
        assert args.src is not None, "src file is not provided"
        evaluate_source(args.lang, args.src, args.inputs)
    if args.operation == 'match':
        assert args.src is not None, "src file is not provided"
        assert args.match_src is not None, "match src is not provided"
        match(args.lang, args.src, args.match_src, args.inputs)
    if args.operation == 'cluster':
        assert args.src_dir is not None, "src_dir is not provided"
        do_clustering(args.lang, args.src_dir, args.inputs)
    if args.operation == 'repair':
        assert args.src is not None, "src is not provided"
        assert args.src_dir is not None, "src_dir is not provided"
        generate_feedback(args.lang, args.src_dir, args.src, args.inputs)
    pass
