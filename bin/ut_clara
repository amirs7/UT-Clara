#!/usr/bin/env python
import os
import argparse

from clara.clara import Clara
from clara.common import print_trace


def evaluate_sources(sources_base_dir):
    sources = os.listdir(sources_base_dir)
    inputs = [1, 2, 3, 4]
    evaluated_sources_count = 0
    clara = Clara(inputs)
    for source in sources:
        clara.process_sources([sources_base_dir + source])
        try:
            trace = clara.eval()
            evaluated_sources_count += 1
        except Exception as e:
            print(source, "failed!", e)
    print(len(sources), evaluated_sources_count)


def evaluate_source(source):
    inputs = [1, 2, 3, 4]
    clara = Clara(inputs)
    clara.process_sources([source])
    trace = clara.eval()
    print_trace(trace)


def do_clustering(sources_base_dir):
    inputs = [1, 2, 3, 4]
    sources = list(map(lambda source_name: sources_base_dir + source_name, os.listdir(sources_base_dir)))
    print("Num of sources:", len(sources))
    clara = Clara(inputs)
    clara.process_sources(sources)
    clara.cluster()


def do_repair(source_a, source_b):
    inputs = [1, 2, 3, 4]
    clara = Clara(inputs)
    clara.process_sources([source_a, source_b])
    clara.repair()


def generate_feedback(lang, correct_sources_dir, wrong_source, inputs):
    clara = Clara(inputs, lang=lang)
    sources = list(map(lambda source_name: correct_sources_dir + source_name, os.listdir(correct_sources_dir)))
    clara.process_sources(sources)
    cluster_files = clara.cluster()
    print("*********** Clustering Done! ***********")
    clara.process_sources([*cluster_files, wrong_source])
    print("Generated Repair:")
    clara.feedback()


def match(source_a, source_b):
    clara = Clara([])
    clara.process_sources([source_a, source_b])
    print(clara.match())


if __name__ == '__main__':
    inputs = ['4', '10', '636 649 338 11 -726 -767 940 813 836 -795', '10',
              '-908 520 -287 315 195 -398 317 467 686 -630', '8', '45 113 -406 694 -505 967 682 -356', '6',
              '-367 314 21 479 -963 -137']
    parser = argparse.ArgumentParser()
    parser.add_argument('lang')
    parser.add_argument('correct_sources_dir')
    parser.add_argument('wrong_source')
    args = parser.parse_args()
    generate_feedback(args.lang, args.correct_sources_dir, args.wrong_source, inputs)
    # do_repair('./resources/a.c', './resources/b.c')
    # do_clustering('./resources/utap/1001/accepted/')
    # match('./resources/a.c', './resources/a.c')
