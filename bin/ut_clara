#!/usr/bin/env python
import os

from clara.clara import Clara
from clara.common import print_trace
from clara.repair import StructMismatch
from clara.ut_matcher import process_model


def evaluate_sources(sources_base_dir):
    sources = os.listdir(sources_base_dir)
    inputs = [1, 2, 3, 4]
    evaluated_sources_count = 0
    clara = Clara(inputs)
    for source in sources:
        clara.process_sources([sources_base_dir + source])
        try:
            trace = clara.eval()
            evaluated_sources_count += 1
        except Exception as e:
            print(source, "failed!", e)
    print(len(sources), evaluated_sources_count)


def evaluate_source(source, inputs):
    clara = Clara(inputs)
    clara.process_sources([source])
    model, trace = clara.eval()
    print_trace(trace)


def do_clustering(sources_base_dir):
    inputs = [1, 2, 3, 4]
    sources = list(map(lambda source_name: sources_base_dir + source_name, os.listdir(sources_base_dir)))
    print("Num of sources:", len(sources))
    clara = Clara(inputs)
    clara.process_sources(sources)
    clara.cluster()


def do_repair(source_a, source_b, inputs):
    clara = Clara(inputs)
    clara.process_sources([source_a, source_b])
    clara.repair()


def two_phase_repair(source_a, source_b, inputs):
    clara = Clara(inputs)
    clara.process_sources([source_a, source_b])
    try:
        clara.repair()
    except StructMismatch:
        print("Struct Mismatch")
        model_b = remove_while(source_b, inputs)
        clara.models[1] = model_b
        clara.repair()


def generate_feedback(lang, correct_sources_dir, wrong_source, inputs):
    clara = Clara(inputs, lang=lang)
    sources = list(map(lambda source_name: correct_sources_dir + source_name, os.listdir(correct_sources_dir)))
    clara.process_sources(sources)
    cluster_files = clara.cluster()
    print("*********** Clustering Done! ***********")
    clara.process_sources([*cluster_files, wrong_source])
    print("Generated Repair:")
    clara.feedback()


def match(source_a, source_b):
    clara = Clara([])
    clara.process_sources([source_a, source_b])
    print(clara.match())


def remove_while(source, inputs):
    clara = Clara(inputs)
    clara.process_sources([source])
    model, trace = clara.eval()
    return process_model(model, trace)


def match_while(source_a, source_b, inputs):
    clara = Clara(inputs)
    clara.process_sources([source_a, source_b])
    model_b = remove_while(source_b, inputs)
    clara.models[1] = model_b
    if clara.match():
        print("Match!!!!!!!!!!!!!!!!!")
    else:
        print("No Match :(")


if __name__ == '__main__':
    pass
    # two_phase_repair()
    # two_phase_repair('./resources/b.c', './resources/a.c', [4])
    # result = match_while('./resources/b.c', './resources/a.c', [4])
